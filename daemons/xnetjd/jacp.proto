
// THIS FILE IS AUTOMATICALLY GENERATED FROM jacp-spec.org using org-babel-mode
// Do not edit it by hand!  Edit the original and re-generate
// Instructions are found in jacp-spec.org!
//
// Contact Eric Anderson <andersoe@cs.cmu.edu> with questions.

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Digitally-Signed%20Data][Digitally-Signed\ Data:1]]

message Signature {
    //algorithm may be omitted if has already been agreed
    enum SignatureAndHashAlgorithm {
        NACL_edwards25519sha512batch = 1; //NaCl standard signing algorithm
    }
    optional SignatureAndHashAlgorithm sig_algorithm = 1;
    required bytes signature = 2;
}

// Digitally-Signed\ Data:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Nonces][Nonces:1]]

message Random {
  optional uint32 gmt_unix_time = 1;
  required bytes random_bytes = 2; 
}

// Nonces:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Initiation%20(Handshake%20Message%201)][Initiation\ \(Handshake\ Message\ 1\):1]]

message HandshakeOne {
    message HandshakeOneEncrypted {
        required bytes nonce = 1;
        required bytes client_ephemeral_pubkey = 2;
        required bytes encrypted_data = 3; //encrypted (Payload)
        message Payload {
            required bytes hash_of_headers = 1;
            required HandshakeOneCore core = 2;
        }
    }
    message HandshakeOneClear {
        message SignedData {
            required ClientHello hello = 1;
            required HandshakeOneCore core = 2;
        }
        required SignedData signed = 1;
        required Signature client_signature = 2;
    }    
    oneof handshake_type {
        HandshakeOneEncrypted encrypted = 1;
        HandshakeOneClear clear = 2;
    }
}

// Initiation\ \(Handshake\ Message\ 1\):1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Initiation%20(Handshake%20Message%201)][Initiation\ \(Handshake\ Message\ 1\):1]]

message HandshakeOneCore {
    optional LayerTwoRequest client_l2_req = 1;
    optional LayerThreeRequest client_l3_req = 2;
    optional ClientCredentials client_credentials = 3;
    optional uint32 client_session_id = 4;
}

// Initiation\ \(Handshake\ Message\ 1\):1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Key%20Exchange%20/%20Establishment][Key\ Exchange\ /\ Establishment:1]]

message ClientHello {
    enum CipherSuite {
        NACL_curve25519xsalsa20poly1305 = 17;  //The standard (only?) suite recommended by NaCl.
    }
    message NaClSessionParams {
        required bytes pubkey = 1;
    }   
    
    required Random client_nonce = 1;    
    required CipherSuite cipher_suite = 2;
    oneof key_exchange {                        //Must match cipher_suite
        NaClSessionParams nacl_params= 6;
    }
}

// Key\ Exchange\ /\ Establishment:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Layer%20Two%20Request][LayerTwoRequest]]

message LayerTwoRequest {
    message EthernetL2Request {
        required bytes client_mac_address = 1;
    }

    message WifiL2Request {
        optional Real80211AssocRequestParams std_params = 1; //Not implemented
        message MinimalXIAWifiParams {
            required bytes bssid = 1;
            required bytes client_mac = 2;
        }        
        optional MinimalXIAWifiParams minimal = 2;
    }

    message DSRCL2Request {
        required bytes client_mac_address = 1;
    }
    

    oneof l2_req {
        EthernetL2Request ethernet = 1;
        WifiL2Request wifi = 2;
        DSRCL2Request dsrc = 3;
    }
}

// LayerTwoRequest ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Layer%20Three%20Request][Layer\ Three\ Request:1]]

message LayerThreeRequest {
    optional IPv4Request ipv4 =1;
    optional XIPRequest xip = 2;
}

// Layer\ Three\ Request:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Layer%203:%20XIA][Layer\ 3:\ XIA:1]]

message XIPRequest {
    message SingleHostXIPRequest {
        required bytes ClientHID = 1;               // Client host ID
        optional bytes ClientAIPPubKey = 2;         // Public key associated with ClientHID
        optional XIPConfigRequest configXIP = 3;
        optional bytes XIPChallengeResponse = 4;
    
    }    
    optional SingleHostXIPRequest single = 1;   // Just attaching one "client" host
}

// Layer\ 3:\ XIA:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Request%20to%20be%20Configured][Request\ to\ be\ Configured:1]]

message XIPConfigRequest {
    oneof configure_how {
        PXHCPConfigRequest pxhcp =1;
    }
}

message PXHCPConfigRequest {
    // Empty on purpose.  Currently there are no parameters to this.
};

// Request\ to\ be\ Configured:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Credential%20Formats][Credential\ Formats:1]]

message ClientCredentials {
   oneof client_cred_option {
       NullClientCredential null = 1;
   }
}

// Credential\ Formats:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Gateway%20Response%20(Handshake%20Message%202)][Gateway\ Response\ \(Handshake\ Message\ 2\):1]]

message HandshakeTwo {
    required uint32 client_session_id = 1;
    required EncryptedData cyphertext = 2; //encrypted (HandshakeTwoProtected)
}

message HandshakeTwoProtected {
    optional LayerTwoReply gateway_l2_reply = 1;
    optional LayerThreeReply gateway_l3_reply = 2;
    optional ClientCredentialReply gateway_cc_reply = 3;
    optional GatewayCredentials gateway_credentials = 4;
    optional uint32 client_session_id = 5;
    optional uint32 gateway_session_id = 6;
}

message EncryptedData {
    optional ClientHello.CipherSuite cipher_suite = 1;
    optional bytes nonce = 2;
    required bytes cyphertext = 3;
}

// Gateway\ Response\ \(Handshake\ Message\ 2\):1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Layer%20Two%20reply][Layer\ Two\ reply:1]]

message LayerTwoReply {
    message LayerTwoDeny { }
    message LayerTwoGrantAndConfigure {
        oneof config {
            EthernetL2Config ethernet = 1;
            WifiL2Config wifi = 2;
            DSRCL2Config dsrc = 3;
        }
    }

    oneof l2_reply {
        LayerTwoDeny deny = 1;
        LayerTwoGrantAndConfigure grant = 2;
    }
}

// Layer\ Two\ reply:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Ethernet][Ethernet:1]]

message EthernetL2Config { };

// Ethernet:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Wi-Fi][Wi-Fi:1]]

message WifiL2Config { };

// Wi-Fi:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*DSRC][DSRC:1]]

message DSRCL2Config { };

// DSRC:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Layer%203%20Reply][Layer\ 3\ Reply:1]]

message LayerThreeReply {
    message LayerThreeDeny { }
    message LayerThreeGrantAndConfigure {
        oneof config {
            XIPConfiguration XIP = 1;
            IPv4Configuration ipv4 = 2;
        }
    }

    oneof l3_reply {
        LayerThreeDeny deny = 1;
        LayerThreeGrantAndConfigure grant = 2;
    }
}

// Layer\ 3\ Reply:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*XIP%20Configuration][XIP\ Configuration:1]]

message XIPConfiguration {
    message SingleHostXIPConfiguration {
        optional PXHCPConfigDeclaration pxhcp = 1;
    }

    oneof type {
        SingleHostXIPConfiguration single = 1;
    }
}

// XIP\ Configuration:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*XIP%20Configuration][XIP\ Configuration:1]]

message PXHCPConfigDeclaration {
    optional string router_dag = 1;
    optional string nameserver_dag = 2;
    optional string router_rv_dag = 3;
    optional string control_rv_dag = 4;
    optional bytes router_4id = 5;
}

// XIP\ Configuration:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*IP%20configuration][IP\ configuration:1]]

message IPv4Configuration {
      // See RFC2131 (DHCP) and 2132 (DHCP/BOOTP options)

    message BindHWAddrIPAddr {
        required bytes hw_addr = 1;
        required string ip_addr = 2;
        optional string netmask = 3;
    }

    message BindIPAddrName {
        required string ip_addr = 1;
        required string dns_name = 2;
    }

    message Routing {        
        message Route {
            required string cidr_notation = 1;
            required string next_hop_addr = 2;
            optional uint32 priority = 3;
        }

        repeated Route routes = 1;
    }

    optional BindHWAddrIPAddr clients_ip_addr = 1;
    optional BindIPAddrName clients_dns_name = 2;
    optional Routing routes = 3;
    
    repeated BindHWAddrIPAddr routers_ip_addrs = 4;
    repeated BindHWAddrIPAddr other_ip_addrs = 5; //Needed?
    repeated BindIPAddrName other_dns_names = 6;  //Needed?

    message DNSSetup {
        optional string localdomain = 1;
        repeated string dns_server = 2;
    }
    optional DNSSetup dns = 7;

    message FurtherConfigMethod {
        message DHCPConfig {
            optional string server_ip_addr = 1;
        }
        oneof config_how {
            DHCPConfig dhcp = 1;
        }
    }
    optional FurtherConfigMethod further_config = 8; 
}

// IP\ configuration:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Gateway%20response%20to%20client's%20credentials:][Gateway\ response\ to\ client\'s\ credentials::1]]

message ClientCredentialReply {
    message ClientCredentialAccept {}
    message ClientCredentialDeny {}
    oneof gateway_response {
        ClientCredentialAccept accept = 1;
        ClientCredentialDeny deny = 2;
    }
}

// Gateway\ response\ to\ client\'s\ credentials::1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Gateway%20credentials%20for%20the%20client:][Gateway\ credentials\ for\ the\ client::1]]

message GatewayCredentials {
    // Null for now -- always accept
}

// Gateway\ credentials\ for\ the\ client::1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Client%20Confirmation%20(Handshake%20Message%203)][Client\ Confirmation\ \(Handshake\ Message\ 3\):1]]

message HandshakeThree {
    // encrypted (HandshakeThreeProtected)
    required EncryptedData cyphertext = 1;
    optional uint32 gateway_session_id = 2;
}

message HandshakeThreeProtected {
    // Must match unprotected (that is, unsigned) session id.
    optional uint32 gateway_session_id = 1;
    optional uint32 client_session_id = 2;
    optional LayerTwoClientAck client_l2_ack_nack = 3;
    optional LayerThreeClientAck client_l3_ack_nack = 4;
    optional GatewayCredentialReply gateway_gc_reply = 5;
}

// Client\ Confirmation\ \(Handshake\ Message\ 3\):1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Client%20response%20to%20gateway's%20credentials:][Client\ response\ to\ gateway\'s\ credentials::1]]

message GatewayCredentialReply {
    message GatewayCredentialAccept {}
    message GatewayCredentialDeny {}
    oneof client_response {
        GatewayCredentialAccept accept = 1;
        GatewayCredentialDeny deny = 2;
    }
}

// Client\ response\ to\ gateway\'s\ credentials::1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Client%20Ack/Nack%20of%20gateway's%20L2%20configuration%20directives][Client\ Ack/Nack\ of\ gateway\'s\ L2\ configuration\ directives:1]]

message LayerTwoClientAck {
    message LayerTwoNack { }
    message LayerTwoAck{ }
    oneof l2_reply {
        LayerTwoNack nack = 1;
        LayerTwoAck ack = 2;
    }
}

// Client\ Ack/Nack\ of\ gateway\'s\ L2\ configuration\ directives:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Client%20Ack/Nack%20of%20gateway's%20L3%20configuration%20directives][Client\ Ack/Nack\ of\ gateway\'s\ L3\ configuration\ directives:1]]

message LayerThreeClientAck {
    message LayerThreeNack { }
    message LayerThreeAck{ }
    oneof l3_reply {
        LayerThreeNack nack = 1;
        LayerThreeAck ack = 2;
    }
}

// Client\ Ack/Nack\ of\ gateway\'s\ L3\ configuration\ directives:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Some%20dummy%20/%20placeholder%20stubs][Some\ dummy\ /\ placeholder\ stubs:1]]

message Real80211AssocRequestParams {
    // In a real implementation, might want to define a way to import the
    // already-standardized 80211 parameters (and maybe their encoding)
    // whole-hog.  Right now, nope
}

message IPv4Request {
    // See RFC2131 (DHCP) and 2132 (DHCP/BOOTP options)
}

// Some\ dummy\ /\ placeholder\ stubs:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Some%20dummy%20/%20placeholder%20stubs][Some\ dummy\ /\ placeholder\ stubs:1]]

message NullClientCredential {
}

// Some\ dummy\ /\ placeholder\ stubs:1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Gateway%20Confirmation%20(Handshake%20Message%204)][Gateway\ Confirmation\ \(Handshake\ Message\ 4\):1]]

message HandshakeFour {
    // encrypted (HandshakeFourProtected)
    required EncryptedData cyphertext = 1;
    optional uint32 client_session_id = 2;
}

message HandshakeFourProtected {
    // Must match unprotected (that is, unsigned) session id.
    optional uint32 client_session_id = 1;
    optional LayerThreeGatewayAck gateway_l3_ack_nack = 2;
}

// Gateway\ Confirmation\ \(Handshake\ Message\ 4\):1 ends here

// [[file:~/work/git/xia-vehicular/veh/jacp-spec.orgmk::*Gateway%20Ack/Nack%20of%20setting%20up%20route%20to%20client][Gateway\ Ack/Nack\ of\ setting\ up\ route\ to\ client:1]]

message LayerThreeGatewayAck {
    message LayerThreeNack { }
    message LayerThreeAck{ }
    oneof l3_reply {
        LayerThreeNack nack = 1;
        LayerThreeAck ack = 2;
    }
}

// Gateway\ Ack/Nack\ of\ setting\ up\ route\ to\ client:1 ends here
